/*
 * This file is generated by jOOQ.
 */
package com.veronica.atheticaprobyveronica.models;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import com.veronica.atheticaprobyveronica.records.CategoriaRecord;
import com.veronica.atheticaprobyveronica.records.FacturaRecord;
import com.veronica.atheticaprobyveronica.records.PermisoRecord;
import com.veronica.atheticaprobyveronica.records.ProductoRecord;
import com.veronica.atheticaprobyveronica.records.UsuarioRecord;
import com.veronica.atheticaprobyveronica.tables.Categoria;
import com.veronica.atheticaprobyveronica.tables.Factura;
import com.veronica.atheticaprobyveronica.tables.Permiso;
import com.veronica.atheticaprobyveronica.tables.Producto;
import com.veronica.atheticaprobyveronica.tables.Usuario;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * AthleticProByVeronica.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CategoriaRecord> KEY_CATEGORIA_PRIMARY = Internal.createUniqueKey(Categoria.CATEGORIA, DSL.name("KEY_Categoria_PRIMARY"), new TableField[] { Categoria.CATEGORIA.ID }, true);
    public static final UniqueKey<FacturaRecord> KEY_FACTURA_PRIMARY = Internal.createUniqueKey(Factura.FACTURA, DSL.name("KEY_Factura_PRIMARY"), new TableField[] { Factura.FACTURA.ID }, true);
    public static final UniqueKey<PermisoRecord> KEY_PERMISO_PRIMARY = Internal.createUniqueKey(Permiso.PERMISO, DSL.name("KEY_Permiso_PRIMARY"), new TableField[] { Permiso.PERMISO.ID }, true);
    public static final UniqueKey<ProductoRecord> KEY_PRODUCTO_PRIMARY = Internal.createUniqueKey(Producto.PRODUCTO, DSL.name("KEY_Producto_PRIMARY"), new TableField[] { Producto.PRODUCTO.ID }, true);
    public static final UniqueKey<UsuarioRecord> KEY_USUARIO_PRIMARY = Internal.createUniqueKey(Usuario.USUARIO, DSL.name("KEY_Usuario_PRIMARY"), new TableField[] { Usuario.USUARIO.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FacturaRecord, UsuarioRecord> FK_FACT_USUA = Internal.createForeignKey(Factura.FACTURA, DSL.name("FK_Fact_Usua"), new TableField[] { Factura.FACTURA.IDUSUARIO }, Keys.KEY_USUARIO_PRIMARY, new TableField[] { Usuario.USUARIO.ID }, true);
    public static final ForeignKey<ProductoRecord, CategoriaRecord> FK_PROD_CATE = Internal.createForeignKey(Producto.PRODUCTO, DSL.name("FK_Prod_Cate"), new TableField[] { Producto.PRODUCTO.IDCATEGORIA }, Keys.KEY_CATEGORIA_PRIMARY, new TableField[] { Categoria.CATEGORIA.ID }, true);
    public static final ForeignKey<UsuarioRecord, PermisoRecord> FK_USUA_PERM = Internal.createForeignKey(Usuario.USUARIO, DSL.name("FK_Usua_Perm"), new TableField[] { Usuario.USUARIO.IDPERMISO }, Keys.KEY_PERMISO_PRIMARY, new TableField[] { Permiso.PERMISO.ID }, true);
}
