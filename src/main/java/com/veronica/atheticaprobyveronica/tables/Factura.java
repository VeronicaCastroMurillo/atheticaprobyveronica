/*
 * This file is generated by jOOQ.
 */
package com.veronica.atheticaprobyveronica.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.veronica.atheticaprobyveronica.models.Athleticprobyveronica;
import com.veronica.atheticaprobyveronica.models.Keys;
import com.veronica.atheticaprobyveronica.records.FacturaRecord;
import com.veronica.atheticaprobyveronica.tables.Usuario.UsuarioPath;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Factura extends TableImpl<FacturaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>AthleticProByVeronica.Factura</code>
     */
    public static final Factura FACTURA = new Factura();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacturaRecord> getRecordType() {
        return FacturaRecord.class;
    }

    /**
     * The column <code>AthleticProByVeronica.Factura.Id</code>.
     */
    public final TableField<FacturaRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.Fecha</code>.
     */
    public final TableField<FacturaRecord, LocalDateTime> FECHA = createField(DSL.name("Fecha"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.IdUsuario</code>.
     */
    public final TableField<FacturaRecord, Integer> IDUSUARIO = createField(DSL.name("IdUsuario"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.MetodoPago</code>.
     */
    public final TableField<FacturaRecord, String> METODOPAGO = createField(DSL.name("MetodoPago"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.MontoPagado</code>.
     */
    public final TableField<FacturaRecord, BigDecimal> MONTOPAGADO = createField(DSL.name("MontoPagado"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.PrecioNeto</code>.
     */
    public final TableField<FacturaRecord, BigDecimal> PRECIONETO = createField(DSL.name("PrecioNeto"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.Descuento</code>.
     */
    public final TableField<FacturaRecord, BigDecimal> DESCUENTO = createField(DSL.name("Descuento"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.Impuesto</code>.
     */
    public final TableField<FacturaRecord, BigDecimal> IMPUESTO = createField(DSL.name("Impuesto"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>AthleticProByVeronica.Factura.PrecioTotal</code>.
     */
    public final TableField<FacturaRecord, BigDecimal> PRECIOTOTAL = createField(DSL.name("PrecioTotal"), SQLDataType.DECIMAL(10, 2), this, "");

    private Factura(Name alias, Table<FacturaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Factura(Name alias, Table<FacturaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Factura</code> table
     * reference
     */
    public Factura(String alias) {
        this(DSL.name(alias), FACTURA);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Factura</code> table
     * reference
     */
    public Factura(Name alias) {
        this(alias, FACTURA);
    }

    /**
     * Create a <code>AthleticProByVeronica.Factura</code> table reference
     */
    public Factura() {
        this(DSL.name("Factura"), null);
    }

    public <O extends Record> Factura(Table<O> path, ForeignKey<O, FacturaRecord> childPath, InverseForeignKey<O, FacturaRecord> parentPath) {
        super(path, childPath, parentPath, FACTURA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FacturaPath extends Factura implements Path<FacturaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FacturaPath(Table<O> path, ForeignKey<O, FacturaRecord> childPath, InverseForeignKey<O, FacturaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FacturaPath(Name alias, Table<FacturaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FacturaPath as(String alias) {
            return new FacturaPath(DSL.name(alias), this);
        }

        @Override
        public FacturaPath as(Name alias) {
            return new FacturaPath(alias, this);
        }

        @Override
        public FacturaPath as(Table<?> alias) {
            return new FacturaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Athleticprobyveronica.ATHLETICPROBYVERONICA;
    }

    @Override
    public Identity<FacturaRecord, Integer> getIdentity() {
        return (Identity<FacturaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FacturaRecord> getPrimaryKey() {
        return Keys.KEY_FACTURA_PRIMARY;
    }

    @Override
    public List<ForeignKey<FacturaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FACT_USUA);
    }

    private transient UsuarioPath _usuario;

    /**
     * Get the implicit join path to the
     * <code>AthleticProByVeronica.Usuario</code> table.
     */
    public UsuarioPath usuario() {
        if (_usuario == null)
            _usuario = new UsuarioPath(this, Keys.FK_FACT_USUA, null);

        return _usuario;
    }

    @Override
    public Factura as(String alias) {
        return new Factura(DSL.name(alias), this);
    }

    @Override
    public Factura as(Name alias) {
        return new Factura(alias, this);
    }

    @Override
    public Factura as(Table<?> alias) {
        return new Factura(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Factura rename(String name) {
        return new Factura(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factura rename(Name name) {
        return new Factura(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factura rename(Table<?> name) {
        return new Factura(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura where(Condition condition) {
        return new Factura(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factura where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factura where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factura where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Factura where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Factura whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
