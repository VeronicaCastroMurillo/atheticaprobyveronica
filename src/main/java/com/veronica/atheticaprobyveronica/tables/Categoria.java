/*
 * This file is generated by jOOQ.
 */
package com.veronica.atheticaprobyveronica.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.veronica.atheticaprobyveronica.models.Athleticprobyveronica;
import com.veronica.atheticaprobyveronica.models.Keys;
import com.veronica.atheticaprobyveronica.records.CategoriaRecord;
import com.veronica.atheticaprobyveronica.tables.Producto.ProductoPath;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Categoria extends TableImpl<CategoriaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>AthleticProByVeronica.Categoria</code>
     */
    public static final Categoria CATEGORIA = new Categoria();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriaRecord> getRecordType() {
        return CategoriaRecord.class;
    }

    /**
     * The column <code>AthleticProByVeronica.Categoria.Id</code>.
     */
    public final TableField<CategoriaRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AthleticProByVeronica.Categoria.Nombre</code>.
     */
    public final TableField<CategoriaRecord, String> NOMBRE = createField(DSL.name("Nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Categoria.Descripcion</code>.
     */
    public final TableField<CategoriaRecord, String> DESCRIPCION = createField(DSL.name("Descripcion"), SQLDataType.CLOB, this, "");

    private Categoria(Name alias, Table<CategoriaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Categoria(Name alias, Table<CategoriaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Categoria</code> table
     * reference
     */
    public Categoria(String alias) {
        this(DSL.name(alias), CATEGORIA);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Categoria</code> table
     * reference
     */
    public Categoria(Name alias) {
        this(alias, CATEGORIA);
    }

    /**
     * Create a <code>AthleticProByVeronica.Categoria</code> table reference
     */
    public Categoria() {
        this(DSL.name("Categoria"), null);
    }

    public <O extends Record> Categoria(Table<O> path, ForeignKey<O, CategoriaRecord> childPath, InverseForeignKey<O, CategoriaRecord> parentPath) {
        super(path, childPath, parentPath, CATEGORIA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CategoriaPath extends Categoria implements Path<CategoriaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CategoriaPath(Table<O> path, ForeignKey<O, CategoriaRecord> childPath, InverseForeignKey<O, CategoriaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CategoriaPath(Name alias, Table<CategoriaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CategoriaPath as(String alias) {
            return new CategoriaPath(DSL.name(alias), this);
        }

        @Override
        public CategoriaPath as(Name alias) {
            return new CategoriaPath(alias, this);
        }

        @Override
        public CategoriaPath as(Table<?> alias) {
            return new CategoriaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Athleticprobyveronica.ATHLETICPROBYVERONICA;
    }

    @Override
    public Identity<CategoriaRecord, Integer> getIdentity() {
        return (Identity<CategoriaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoriaRecord> getPrimaryKey() {
        return Keys.KEY_CATEGORIA_PRIMARY;
    }

    private transient ProductoPath _producto;

    /**
     * Get the implicit to-many join path to the
     * <code>AthleticProByVeronica.Producto</code> table
     */
    public ProductoPath producto() {
        if (_producto == null)
            _producto = new ProductoPath(this, null, Keys.FK_PROD_CATE.getInverseKey());

        return _producto;
    }

    @Override
    public Categoria as(String alias) {
        return new Categoria(DSL.name(alias), this);
    }

    @Override
    public Categoria as(Name alias) {
        return new Categoria(alias, this);
    }

    @Override
    public Categoria as(Table<?> alias) {
        return new Categoria(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Categoria rename(String name) {
        return new Categoria(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categoria rename(Name name) {
        return new Categoria(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Categoria rename(Table<?> name) {
        return new Categoria(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria where(Condition condition) {
        return new Categoria(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categoria where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categoria where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categoria where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Categoria where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Categoria whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
