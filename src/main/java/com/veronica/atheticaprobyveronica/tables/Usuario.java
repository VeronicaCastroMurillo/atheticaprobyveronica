/*
 * This file is generated by jOOQ.
 */
package com.veronica.atheticaprobyveronica.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.veronica.atheticaprobyveronica.models.Athleticprobyveronica;
import com.veronica.atheticaprobyveronica.models.Keys;
import com.veronica.atheticaprobyveronica.records.UsuarioRecord;
import com.veronica.atheticaprobyveronica.tables.Factura.FacturaPath;
import com.veronica.atheticaprobyveronica.tables.Permiso.PermisoPath;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Usuario extends TableImpl<UsuarioRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>AthleticProByVeronica.Usuario</code>
     */
    public static final Usuario USUARIO = new Usuario();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsuarioRecord> getRecordType() {
        return UsuarioRecord.class;
    }

    /**
     * The column <code>AthleticProByVeronica.Usuario.Id</code>.
     */
    public final TableField<UsuarioRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Cedula</code>.
     */
    public final TableField<UsuarioRecord, String> CEDULA = createField(DSL.name("Cedula"), SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Nombre</code>.
     */
    public final TableField<UsuarioRecord, String> NOMBRE = createField(DSL.name("Nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Correo</code>.
     */
    public final TableField<UsuarioRecord, String> CORREO = createField(DSL.name("Correo"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Contraseña</code>.
     */
    public final TableField<UsuarioRecord, String> CONTRASEÑA = createField(DSL.name("Contraseña"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.IdPermiso</code>.
     */
    public final TableField<UsuarioRecord, Integer> IDPERMISO = createField(DSL.name("IdPermiso"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Telefono</code>.
     */
    public final TableField<UsuarioRecord, String> TELEFONO = createField(DSL.name("Telefono"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Direccion</code>.
     */
    public final TableField<UsuarioRecord, String> DIRECCION = createField(DSL.name("Direccion"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>AthleticProByVeronica.Usuario.Activo</code>.
     */
    public final TableField<UsuarioRecord, Boolean> ACTIVO = createField(DSL.name("Activo"), SQLDataType.BIT, this, "");

    private Usuario(Name alias, Table<UsuarioRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Usuario(Name alias, Table<UsuarioRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Usuario</code> table
     * reference
     */
    public Usuario(String alias) {
        this(DSL.name(alias), USUARIO);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Usuario</code> table
     * reference
     */
    public Usuario(Name alias) {
        this(alias, USUARIO);
    }

    /**
     * Create a <code>AthleticProByVeronica.Usuario</code> table reference
     */
    public Usuario() {
        this(DSL.name("Usuario"), null);
    }

    public <O extends Record> Usuario(Table<O> path, ForeignKey<O, UsuarioRecord> childPath, InverseForeignKey<O, UsuarioRecord> parentPath) {
        super(path, childPath, parentPath, USUARIO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsuarioPath extends Usuario implements Path<UsuarioRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UsuarioPath(Table<O> path, ForeignKey<O, UsuarioRecord> childPath, InverseForeignKey<O, UsuarioRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsuarioPath(Name alias, Table<UsuarioRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsuarioPath as(String alias) {
            return new UsuarioPath(DSL.name(alias), this);
        }

        @Override
        public UsuarioPath as(Name alias) {
            return new UsuarioPath(alias, this);
        }

        @Override
        public UsuarioPath as(Table<?> alias) {
            return new UsuarioPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Athleticprobyveronica.ATHLETICPROBYVERONICA;
    }

    @Override
    public Identity<UsuarioRecord, Integer> getIdentity() {
        return (Identity<UsuarioRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsuarioRecord> getPrimaryKey() {
        return Keys.KEY_USUARIO_PRIMARY;
    }

    @Override
    public List<ForeignKey<UsuarioRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_USUA_PERM);
    }

    private transient PermisoPath _permiso;

    /**
     * Get the implicit join path to the
     * <code>AthleticProByVeronica.Permiso</code> table.
     */
    public PermisoPath permiso() {
        if (_permiso == null)
            _permiso = new PermisoPath(this, Keys.FK_USUA_PERM, null);

        return _permiso;
    }

    private transient FacturaPath _factura;

    /**
     * Get the implicit to-many join path to the
     * <code>AthleticProByVeronica.Factura</code> table
     */
    public FacturaPath factura() {
        if (_factura == null)
            _factura = new FacturaPath(this, null, Keys.FK_FACT_USUA.getInverseKey());

        return _factura;
    }

    @Override
    public Usuario as(String alias) {
        return new Usuario(DSL.name(alias), this);
    }

    @Override
    public Usuario as(Name alias) {
        return new Usuario(alias, this);
    }

    @Override
    public Usuario as(Table<?> alias) {
        return new Usuario(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(String name) {
        return new Usuario(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(Name name) {
        return new Usuario(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usuario rename(Table<?> name) {
        return new Usuario(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario where(Condition condition) {
        return new Usuario(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usuario where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usuario where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usuario where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Usuario where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Usuario whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
