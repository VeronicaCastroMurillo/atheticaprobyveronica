/*
 * This file is generated by jOOQ.
 */
package com.veronica.modelo.tables;


import com.veronica.modelo.Athleticprobyveronica;
import com.veronica.modelo.Keys;
import com.veronica.modelo.tables.Categoria.CategoriaPath;
import com.veronica.modelo.tables.records.ProductoRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Producto extends TableImpl<ProductoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>AthleticProByVeronica.Producto</code>
     */
    public static final Producto PRODUCTO = new Producto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductoRecord> getRecordType() {
        return ProductoRecord.class;
    }

    /**
     * The column <code>AthleticProByVeronica.Producto.Id</code>.
     */
    public final TableField<ProductoRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AthleticProByVeronica.Producto.Nombre</code>.
     */
    public final TableField<ProductoRecord, String> NOMBRE = createField(DSL.name("Nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Producto.Descripcion</code>.
     */
    public final TableField<ProductoRecord, String> DESCRIPCION = createField(DSL.name("Descripcion"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>AthleticProByVeronica.Producto.IdCategoria</code>.
     */
    public final TableField<ProductoRecord, Integer> IDCATEGORIA = createField(DSL.name("IdCategoria"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>AthleticProByVeronica.Producto.Precio</code>.
     */
    public final TableField<ProductoRecord, BigDecimal> PRECIO = createField(DSL.name("Precio"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>AthleticProByVeronica.Producto.Cantidad</code>.
     */
    public final TableField<ProductoRecord, Integer> CANTIDAD = createField(DSL.name("Cantidad"), SQLDataType.INTEGER.nullable(false), this, "");

    private Producto(Name alias, Table<ProductoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Producto(Name alias, Table<ProductoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Producto</code> table
     * reference
     */
    public Producto(String alias) {
        this(DSL.name(alias), PRODUCTO);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Producto</code> table
     * reference
     */
    public Producto(Name alias) {
        this(alias, PRODUCTO);
    }

    /**
     * Create a <code>AthleticProByVeronica.Producto</code> table reference
     */
    public Producto() {
        this(DSL.name("Producto"), null);
    }

    public <O extends Record> Producto(Table<O> path, ForeignKey<O, ProductoRecord> childPath, InverseForeignKey<O, ProductoRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCTO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductoPath extends Producto implements Path<ProductoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductoPath(Table<O> path, ForeignKey<O, ProductoRecord> childPath, InverseForeignKey<O, ProductoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductoPath(Name alias, Table<ProductoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductoPath as(String alias) {
            return new ProductoPath(DSL.name(alias), this);
        }

        @Override
        public ProductoPath as(Name alias) {
            return new ProductoPath(alias, this);
        }

        @Override
        public ProductoPath as(Table<?> alias) {
            return new ProductoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Athleticprobyveronica.ATHLETICPROBYVERONICA;
    }

    @Override
    public Identity<ProductoRecord, Integer> getIdentity() {
        return (Identity<ProductoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductoRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTO_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProductoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_PROD_CATE);
    }

    private transient CategoriaPath _categoria;

    /**
     * Get the implicit join path to the
     * <code>AthleticProByVeronica.Categoria</code> table.
     */
    public CategoriaPath categoria() {
        if (_categoria == null)
            _categoria = new CategoriaPath(this, Keys.FK_PROD_CATE, null);

        return _categoria;
    }

    @Override
    public Producto as(String alias) {
        return new Producto(DSL.name(alias), this);
    }

    @Override
    public Producto as(Name alias) {
        return new Producto(alias, this);
    }

    @Override
    public Producto as(Table<?> alias) {
        return new Producto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Producto rename(String name) {
        return new Producto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Producto rename(Name name) {
        return new Producto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Producto rename(Table<?> name) {
        return new Producto(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto where(Condition condition) {
        return new Producto(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Producto where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Producto where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Producto where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Producto where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Producto whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
