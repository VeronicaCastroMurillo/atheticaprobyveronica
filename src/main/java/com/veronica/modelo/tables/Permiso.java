/*
 * This file is generated by jOOQ.
 */
package com.veronica.modelo.tables;


import com.veronica.modelo.Athleticprobyveronica;
import com.veronica.modelo.Keys;
import com.veronica.modelo.tables.Usuario.UsuarioPath;
import com.veronica.modelo.tables.records.PermisoRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Permiso extends TableImpl<PermisoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>AthleticProByVeronica.Permiso</code>
     */
    public static final Permiso PERMISO = new Permiso();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermisoRecord> getRecordType() {
        return PermisoRecord.class;
    }

    /**
     * The column <code>AthleticProByVeronica.Permiso.Id</code>.
     */
    public final TableField<PermisoRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>AthleticProByVeronica.Permiso.Nombre</code>.
     */
    public final TableField<PermisoRecord, String> NOMBRE = createField(DSL.name("Nombre"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    private Permiso(Name alias, Table<PermisoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Permiso(Name alias, Table<PermisoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Permiso</code> table
     * reference
     */
    public Permiso(String alias) {
        this(DSL.name(alias), PERMISO);
    }

    /**
     * Create an aliased <code>AthleticProByVeronica.Permiso</code> table
     * reference
     */
    public Permiso(Name alias) {
        this(alias, PERMISO);
    }

    /**
     * Create a <code>AthleticProByVeronica.Permiso</code> table reference
     */
    public Permiso() {
        this(DSL.name("Permiso"), null);
    }

    public <O extends Record> Permiso(Table<O> path, ForeignKey<O, PermisoRecord> childPath, InverseForeignKey<O, PermisoRecord> parentPath) {
        super(path, childPath, parentPath, PERMISO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PermisoPath extends Permiso implements Path<PermisoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PermisoPath(Table<O> path, ForeignKey<O, PermisoRecord> childPath, InverseForeignKey<O, PermisoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermisoPath(Name alias, Table<PermisoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermisoPath as(String alias) {
            return new PermisoPath(DSL.name(alias), this);
        }

        @Override
        public PermisoPath as(Name alias) {
            return new PermisoPath(alias, this);
        }

        @Override
        public PermisoPath as(Table<?> alias) {
            return new PermisoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Athleticprobyveronica.ATHLETICPROBYVERONICA;
    }

    @Override
    public Identity<PermisoRecord, Integer> getIdentity() {
        return (Identity<PermisoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermisoRecord> getPrimaryKey() {
        return Keys.KEY_PERMISO_PRIMARY;
    }

    private transient UsuarioPath _usuario;

    /**
     * Get the implicit to-many join path to the
     * <code>AthleticProByVeronica.Usuario</code> table
     */
    public UsuarioPath usuario() {
        if (_usuario == null)
            _usuario = new UsuarioPath(this, null, Keys.FK_USUA_PERM.getInverseKey());

        return _usuario;
    }

    @Override
    public Permiso as(String alias) {
        return new Permiso(DSL.name(alias), this);
    }

    @Override
    public Permiso as(Name alias) {
        return new Permiso(alias, this);
    }

    @Override
    public Permiso as(Table<?> alias) {
        return new Permiso(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permiso rename(String name) {
        return new Permiso(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permiso rename(Name name) {
        return new Permiso(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permiso rename(Table<?> name) {
        return new Permiso(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso where(Condition condition) {
        return new Permiso(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permiso where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permiso where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permiso where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permiso where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permiso whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
